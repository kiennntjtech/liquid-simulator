def podlabel = "jenkins-${UUID.randomUUID().toString()}"
pipeline { 
 agent { 
   kubernetes {
     label podlabel
     yaml """
kind: Pod
metadata:
  name: jenkins-slave
spec:
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: nodegrouplabel
            operator: In
            values:
            - tools-chain
  containers:
  - name: kaniko
    image: 925846982767.dkr.ecr.ap-southeast-1.amazonaws.com/build-image:jenkin-agent
    imagePullPolicy: Always
    command:
    - /busybox/cat
    tty: true
    volumeMounts:
      - name: aws-secret
        mountPath: /root/.aws/
      - name: docker-registry-config
        mountPath: /kaniko/.docker
  - name: tools
    image: argoproj/argo-cd-ci-builder:v1.0.0
    command:
    - cat
    tty: true
  - name: build
    image: 925846982767.dkr.ecr.ap-southeast-1.amazonaws.com/build-image:build-web-node20
    command:
    - cat
    tty: true         
  volumes:
    - name: aws-secret
      secret:
        secretName: aws-secret
    - name: docker-registry-config
      configMap:
        name: docker-registry-config
"""
   }  
  }

 environment {
  ECR_DEST = "925846982767.dkr.ecr.ap-southeast-1.amazonaws.com/reverse-ai-admin-service"
  WORK_SPACE = "/home/jenkins/agent/workspace/dev-ra-pipeline/dev-reverse-ai-admin-service/"
  BUILD_ENVIRONMENT = "dev"
  //Commit values
  repo = checkout scm
  AUTHOR = sh(script: "git log -1 --pretty=%an ${repo.GIT_COMMIT}", returnStdout: true).trim()
  COMMIT_MESSAGE = sh(script: "git log -1 --pretty=%B ${repo.GIT_COMMIT}", returnStdout: true).trim()
  DEPLOYMENT_TAG = "Commit by (${AUTHOR}): ${COMMIT_MESSAGE}"
  COMMIT_TAG = "${repo.GIT_COMMIT[0..6]}"
  IMAGE_NEW = "${ECR_DEST}:${BUILD_ENVIRONMENT}-${COMMIT_TAG}"
 }

 stages {

  stage('Build-service') {
   steps {
     container(name: 'build') {
        sh '''#!/bin/bash
          echo " \n *** Building RA-ADMIN-API-SERVICES-NODEJS *** \n"
          echo " \n *** npm install -g @nestjs/cli *** \n"
          npm install -g @nestjs/cli
          cd ${WORK_SPACE}
          cp -rp .env.dev .env
          npm install
          echo " \n *** npm run build *** \n"
          npm run build
        '''
     }
    }
   }

  stage('Build') {
   environment {
     PATH = "/busybox:/kaniko:$PATH"
   }
   steps {
     
     container(name: 'kaniko', shell: '/busybox/sh') {

        sh """#!/busybox/sh
        echo " \n *** Building RA-SERVICES *** \n"
        /kaniko/executor --context=${WORK_SPACE} --dockerfile=Dockerfile --destination=${ECR_DEST}:${BUILD_ENVIRONMENT}-latest --destination=${ECR_DEST}:${BUILD_ENVIRONMENT}-${COMMIT_TAG}

      """
     }
    }
   }
  
  stage('Deploy') {
      environment {
        GIT_CREDS = credentials('github-tjtech')
        GIT_REPO_EMAIL = 'cuong.nc@tjtech.tech'
        HELM_GIT_REPO_URL = "github.com/Tj-ex/ra-argocd-application.git"
        GIT_REPO_BRANCH = "main"
        DEPLOY_FILE = "ra-applications/dev-ra-crm-admin-api-service/ra-admin-service-api-deployment.yaml" 
          
       // Update above variables with your user details
      }
      steps {
        container(name: 'tools') {
            sh "git clone https://${GIT_CREDS_USR}:${GIT_CREDS_PSW}@${HELM_GIT_REPO_URL} --branch ${GIT_REPO_BRANCH}"
            sh "git config --global user.email ${env.GIT_REPO_EMAIL}"
             // install wq
            sh "wget https://github.com/mikefarah/yq/releases/download/v4.9.6/yq_linux_amd64.tar.gz"
            sh "tar xvf yq_linux_amd64.tar.gz"
            sh "mv yq_linux_amd64 /usr/bin/yq"
            sh "git checkout -b master"
          dir("ra-argocd-application") {
//              sh "git checkout ${GIT_REPO_BRANCH}"
            //install done
            sh '''#!/bin/bash
              echo $IMAGE_NEW
              ls -lth
              yq eval '.spec.template.spec.containers[0].image = env(IMAGE_NEW)' -i ${DEPLOY_FILE}
              pwd
              git add ${DEPLOY_FILE}
              git commit -m 'Triggered Build'
              git push https://${GIT_CREDS_USR}:${GIT_CREDS_PSW}@${HELM_GIT_REPO_URL}
            '''
          }
        }
      }
    }   

    }

  }